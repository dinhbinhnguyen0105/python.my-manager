# src/robot/browser_worker.py

import time
from playwright.sync_api import sync_playwright, Page, BrowserContext
from playwright.sync_api import TimeoutError as PlaywrightTimeoutError
from PyQt6.QtCore import QObject

from src.utils.logger import log
from src.robot import selectors
from src.robot.browser_actions import ACTION_MAP
from src.utils.robot_handler import get_proxy


PLAYWRIGHT_ARGS = [
    "--disable-blink-features=AutomationControlled",
    "--disable-infobars",
    "--disable-extensions",
    "--no-sandbox",
]
network_conditions = {
    "offline": {
        "offline": True,
        "latency": 0,
        "download_throughput": -1,  # Kh√¥ng √°p d·ª•ng khi offline
        "upload_throughput": -1,  # Kh√¥ng √°p d·ª•ng khi offline
    },
    "Slow 3G": {
        "offline": False,
        # T·ªëc ƒë·ªô download (v√≠ d·ª•: 500 kbps -> 500 * 1024 / 8 bytes/s)
        "download_throughput": int(500 * 1024 / 8),
        # T·ªëc ƒë·ªô upload (v√≠ d·ª•: 256 kbps -> 256 * 1024 / 8 bytes/s)
        "upload_throughput": int(256 * 1024 / 8),
        "latency": 400,  # ƒê·ªô tr·ªÖ 400ms
    },
    "Fast 3G": {
        "offline": False,
        "download_throughput": int(1.5 * 1024 * 1024 / 8),  # 1.5 Mbps
        "upload_throughput": int(750 * 1024 / 8),  # 750 kbps
        "latency": 150,  # 150ms
    },
    # Th√™m c√°c c·∫•u h√¨nh kh√°c n·∫øu c·∫ßn...
    "No Throttling": {  # ƒê·ªÉ t·∫Øt throttling
        "offline": False,
        "latency": 0,
        "download_throughput": -1,
        "upload_throughput": -1,
    },
}


def set_network_throttling(page: Page, condition_name: str):
    """ƒê·∫∑t gi·ªõi h·∫°n m·∫°ng cho page s·ª≠ d·ª•ng CDP."""
    if condition_name not in network_conditions:
        print(f"C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m·∫°ng '{condition_name}'. B·ªè qua.")
        return

    conditions = network_conditions[condition_name]
    print(f"ƒêang √°p d·ª•ng gi·ªõi h·∫°n m·∫°ng: {condition_name}...")
    try:
        # T·∫°o session CDP g·∫Øn v·ªõi page n√†y
        cdp_session = page.context.new_cdp_session(page)
        # G·ª≠i l·ªánh gi·∫£ l·∫≠p m·∫°ng
        cdp_session.send(
            "Network.emulateNetworkConditions",
            {
                "offline": conditions["offline"],
                "latency": conditions["latency"],
                "downloadThroughput": conditions["download_throughput"],
                "uploadThroughput": conditions["upload_throughput"],
                # 'connectionType': 'cellular3g' # C√≥ th·ªÉ th√™m n·∫øu mu·ªën
            },
        )
        print("-> √Åp d·ª•ng th√†nh c√¥ng.")
    except Exception as e:
        # CDP c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß tr√™n Firefox/WebKit
        print(f"-> L·ªói khi ƒë·∫∑t gi·ªõi h·∫°n m·∫°ng qua CDP: {e}")
        print(
            "   L∆∞u √Ω: Gi·∫£ l·∫≠p m·∫°ng qua CDP ho·∫°t ƒë·ªông t·ªët nh·∫•t v·ªõi tr√¨nh duy·ªát Chromium."
        )


def discussion(payload):
    browser_option = {
        "proxy": payload.get("proxy", None),
        "screen": {"width": 1920, "height": 1080},
        # "screen": {"width": 1080, "height": 760},
        "user_data_dir": payload.get("user_data_dir"),
        "headless": payload.get("headless"),
        "args": PLAYWRIGHT_ARGS,
        "user_agent": payload.get("user_agent", None),
    }

    with sync_playwright() as p:
        try:
            browser_context = p.chromium.launch_persistent_context(**browser_option)
            log(f"Browser launched.")
            page = browser_context.new_page()

            # set_network_throttling(page, "Slow 3G")
            # set_network_throttling(page, "Fast 3G")

            page.wait_for_event("close", timeout=0)

            action_function = ACTION_MAP["discussion"]
            action_function(
                page,
                2,
                {
                    "description": """
nh√† ph·ªë m·∫∑t ƒë∆∞·ªùng ƒë∆∞·ªùng xe h∆°i (ID: re.s.551a479b)
üó∫ V·ªã tr√≠: 3 Th√°ng 4, Ph∆∞·ªùng 3, ƒê√† L·∫°t
+ C√≥ 1 ph√≤ng gi·∫∑t, s√¢n ph∆°i, s√¢n th∆∞·ª£ng, gi·∫øng tr·ªùi
+ S√¢n ƒë·ªÉ xe 7 ch·ªó tr∆∞·ªõc nh√†
------------
üíµ Gi√°: 6.79t·ª∑ üéÅüå¶Ô∏è
‚òé 0375.155.525 Mr. B√¨nh

------------------
K√Ω g·ª≠i mua, b√°n - cho thu√™, thu√™ b·∫•t ƒë·ªông s·∫£n xin li√™n h·ªá 0375.155.525 - ƒê. B√¨nh
------------------

[
    pid <re.s.551a479b>
    updated_at <2025-04-22 06:07:40>
    published_at <2025-04-23 09:14:37 +07 (+0700)>
]
                    """,
                    "title": "[6.79 T·ª∂] B√ÅN NH√Ä PH·ªê, N·ªòI TH·∫§T N·ªòI TH·∫§T C∆† B·∫¢N ·ªû ƒê√Ä L·∫†T",
                    "images": [
                        "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/products/re/43/43_0.jpg",
                        "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/products/re/43/43_1.jpg",
                        "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/products/re/43/43_2.jpg",
                        "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/products/re/43/43_3.jpg",
                        "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/products/re/43/43_4.jpg",
                        "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/products/re/43/43_5.jpg",
                    ],
                },
                QObject(),
            )

        except Exception as e:
            log(f"ERROR {e}")
            raise Exception(e)


if __name__ == "__main__":
    discussion(
        {
            # "proxy": get_proxy(
            #     "https://proxyxoay.shop/api/get.php?key=IHafXUJiELxnkICjKTpOTE&&nhamang=random&&tinhthanh=0"
            # ),
            # "user_data_dir": "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/users/udd/test",
            "user_data_dir": "/Volumes/KINGSTON/Dev/python/python.my-manager/repositories/users/udd/11",
            # "user_data_dir": "/Users/ndb/Dev/python/python.my-manager/repositories/users/udd/2",
            "headless": False,
            "user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
        }
    )
